<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfGuardUserTable extends PluginsfGuardUserTable
{
  // for janrain, get user by unique identifier
  public function findByToken($identifier)
  {
    $q = Doctrine_Query::create()
        ->select('u.id, u.last_login, p.first_name, p.last_name, p.zipcode, p.gender, p.rpx_birthday, rpx.url, p.status, p.email, p.profile_image, p.rpx_profile_image, p.suspend_until')
        ->from('sfGuardUser u')
        ->innerJoin('u.Profile p')
        ->where('u.rpx_identifier = ?', $identifier);
    return $q->fetchOne();
  }

  public function getUser($user_id)
  {
    $q = Doctrine_Query::create()
        ->select('u.username, p.score')
        ->from('sfGuardUser u')
        ->innerJoin('u.Profile p')
        ->where('u.id = ?', $user_id)
        ->useResultCache(true, 3600, 'user_'.$user_id);
    return $q->fetchOne();
  }

  public function getUserByUsername($username)
  {
    $q = Doctrine_Query::create()
        ->select('u.id, u.username, u.created_at, u.updated_at, p.score, p.email')
        ->from('sfGuardUser u')
        ->innerJoin('u.Profile p')
        ->where('u.username = ?', $username)
        ->useResultCache(true, 3600, 'user_'.$username);
    return $q->fetchOne();
  }

  public function checkUsername($username) {
      $q = Doctrine_Query::create()
          ->from('sfGuardUser')
          ->where('username = ?', $username);
      $result = $q->execute();
      return $result[0]->username;
  }

  public function retrieveByEmail ($email) {
    $q = Doctrine_Query::create()
      ->select('u.*')
      ->from('sfGuardUser u')
      ->leftjoin('u.Profile p')
      ->where('p.email = ?', $email);
    $result = $q->fetchOne();
    return $result;
  }

  public function getUserFollowStats($user_id, $days=0)
  {
    $past = 0;
    if ($days != 0)
    {
      $past = time() - (60 * 60 * 24 * $days);
    }

    $q = Doctrine_Query::create()
      ->select('COUNT(id) as follow_change')
      ->from('FollowUserReference')
      ->where('user1_id = ? AND created_at >= ?', array($user_id, $past));
    $result = $q->fetchArray();
    return $result;
  }

  public function getTopUsers($limit, $days) {
    $past = 0;
    if ($days != 0)
    {
      $past = time() - (60 * 60 * 24 * $days);
    }
    $q = Doctrine_Query::create()
      ->select('u.*, p.status, p.is_mod')
      ->addSelect('(SELECT SUM(us.amount) FROM UserScore us WHERE UNIX_TIMESTAMP(us.created_at) >= '.$past.' AND u.id = us.target_user_id AND us.status = "Active") AS score_increase')
      ->from('sfGuardUser u')
      ->leftJoin('u.Profile p')
      ->where('p.status = ? AND p.is_mod != ?', array('Active', true))
      ->orderBy('score_increase DESC')
      ->limit($limit);
    $q->useResultCache(true, 60, 'topusers_'.$days);
    $results = $q->fetchArray();

    return $results;
  }

  public function getTopModUsers($limit, $days) {
    $curTime = time();
    if ($days != 0)
      $past = $curTime - (60 * 60 * 24 * $days);
    else
      $past = 0;

    $q = Doctrine_Query::create()
      ->select('u.*, p.status, p.is_mod')
      ->addSelect('(SELECT sum(us.amount) FROM UserScore us WHERE UNIX_TIMESTAMP(us.created_at) >= '.$past.' AND u.id = us.target_user_id AND us.status = "Active") AS score_increase')
      ->from('sfGuardUser u')
      ->leftJoin('u.Profile p')
      ->where('p.status = ? AND p.is_mod = ?', array('Active', true))
      ->limit($limit)
      ->orderBy('score_increase DESC');
    $q->useResultCache(true, 60, 'topmodusers_'.$days);
    return $q->fetchArray();
  }

  public function getUserCount()
  {
    $q = Doctrine_Query::create()
      ->select('count(id) AS count')
      ->from('sfGuardUser u')
      ->leftjoin('u.Profile p')
      ->where('p.status = ?', 'Active');
    return $q->fetchOne();
  }

  public function getUserRevenueStats($user_id)
  {
    // *** get the unclaimed amount
    $stats['revenue'] = array('unclaimed' => 0, 'popularity' => 0);

    $q = Doctrine_Query::create()
      ->select('SUM(amount) as points')
      ->from('UserRevenue')
      ->where('user_id = ? AND status = ? AND claimed = ?', array($user_id, 'Active', 0))
      ->useResultCache(true, 300, 'user_revenue_unclaimed_'.$user_id);
    $result = $q->fetchOne();

    $stats['revenue']['unclaimed'] = $result['points'] ? $result['points'] : 0;

    $stats['revenue']['popularity'] = $this->generatePopularity($user_id);

    return $stats;
  }

  public function getUsersForPointsDistribution($moderators=null)
  {
    $q = Doctrine_Query::create()
      ->select('u.id')
      ->from('sfGuardUser u')
      ->innerJoin('u.Profile p')
      ->where('p.status = ?', array('Active'));

    if (!$moderators)
      $q->addWhere('p.is_mod != 1');

    return $q->fetchArray();
  }

  public function getClaims($user_id)
  {
    $q = Doctrine_Query::create()
      ->select('*')
      ->from('UserRevenue')
      ->where('status = ? AND user_id = ?', array('Active', $user_id))
      ->orderBy('created_at DESC');

    return $q->fetchArray();
  }

  // Master user popularity function
  public function generatePopularity($user_id)
  {
    // get the last distribution time (to generate popularity since then)
    $q = Doctrine_Query::create()
      ->select('created_at')
      ->from('UserRevenue')
      ->orderBy('created_at DESC');
    $last_distribution = $q->fetchOne();

    $last_distribution = $last_distribution['created_at'] ? $last_distribution['created_at'] : '0000-00-00 00:00:00';

    $q = Doctrine_Query::create()
      ->select('u.id, COUNT(f.id) AS total_followers, COUNT(f2.id) AS new_followers')
      ->addSelect('(SELECT SUM(us.amount) FROM UserScore us WHERE us.created_at >= "'.$last_distribution.'" AND u.id = us.target_user_id AND us.status = "Active" AND us.amount > 0) AS score_increase')
      ->addSelect('(SELECT SUM(us2.amount) FROM UserScore us2 WHERE us2.created_at >= "'.$last_distribution.'" AND u.id = us2.target_user_id AND us2.status = "Active" AND us2.amount < 0) AS score_decrease')
      ->addSelect('(SELECT SUM(ur.amount) FROM UserScore ur WHERE ur.created_at >= "'.$last_distribution.'" AND u.id = ur.user_id AND ur.status = "Active" AND ur.amount > 0) AS rate_ups')
      ->addSelect('(SELECT SUM(ur2.amount) FROM UserScore ur2 WHERE ur2.created_at >= "'.$last_distribution.'" AND u.id = ur2.user_id AND ur2.status = "Active" AND ur2.amount < 0) AS rate_downs')
      ->from('sfGuardUser u')
      ->innerJoin('u.Profile p')
      ->leftJoin('u.Followers f')
      ->leftJoin('u.Followers f2 WITH f2.created_at >= ?', $last_distribution)
      ->where('u.id = ?', $user_id);

    $user = $q->fetchOne();
    
    /*
     * followers change popularity by (increase in followers) / (log((total-new followers * 10) / 5)
     * this is to try to reward new users that have small numbers of followers more at the start (to encourage them) and to
     * take some power out of power users hands to level the playing field a little bit
     * Old follower count has to be at least 2 to work with ln
     */
    $old_follower_count = ($user['total_followers'] - $user['new_followers']) > 1 ? ($user['total_followers'] - $user['new_followers']) : 2;
    $follower_influence = $user['new_followers']/(log($old_follower_count * 10) / 5);

    /*
     * account score changes popularity by (score_increase * 1.5)-(score_decrease * .5)
     */
    $score_influence = $user['score_increase'] * 1.5 + $user['score_decrease'] * .5;

    /*
     * items rated ratio changes popularity by up to +-.2
     */
    if ($user['rate_downs'] == 0)
    {
      $rate_influence = 1;
    }
    else
    {
      $rate_influence = $user['rate_ups'] / $user['rate_downs'];
      if ($rate_influence > 1.1)
        $rate_influence = 1.1;
      else if ($rate_influence < .8)
        $rate_influence = .8;
    }

    $popularity = ceil(($follower_influence + $score_influence) * $rate_influence);

    return $popularity;
  }
}