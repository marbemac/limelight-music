<?php

/**
 * BasesfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property varchar $rpx_identifier
 * @property varchar $rpx_provider_name
 * @property bool $username_changed
 * @property bool $show_help
 * @property bool $show_welcome_splash
 * @property Doctrine_Collection $groups
 * @property Doctrine_Collection $permissions
 * @property Doctrine_Collection $FollowingUsers
 * @property Doctrine_Collection $FollowingLimelights
 * @property Doctrine_Collection $Followers
 * @property Doctrine_Collection $sfGuardUserPermission
 * @property Doctrine_Collection $sfGuardUserGroup
 * @property sfGuardRememberKey $RememberKeys
 * @property Profile $Profile
 * @property Doctrine_Collection $Limelights
 * @property Doctrine_Collection $LimelightSlices
 * @property Doctrine_Collection $Wikis
 * @property Doctrine_Collection $News
 * @property Doctrine_Collection $Songs
 * @property Doctrine_Collection $Specifications
 * @property Doctrine_Collection $LimelightSpecifications
 * @property Doctrine_Collection $NewsLinks
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $ItemTags
 * @property Doctrine_Collection $Actions
 * @property Doctrine_Collection $Badges
 * @property Doctrine_Collection $LimelightOwn
 * @property Doctrine_Collection $LimelightProCon
 * @property Doctrine_Collection $ProReviews
 * @property Doctrine_Collection $UserReviews
 * @property Doctrine_Collection $Favorites
 * @property Doctrine_Collection $NewsFavorites
 * @property Doctrine_Collection $SongFavorites
 * @property Doctrine_Collection $LimelightFavorites
 * @property Doctrine_Collection $UserReviewFavorites
 * @property Doctrine_Collection $Viewed
 * @property Doctrine_Collection $Views
 * @property Doctrine_Collection $Played
 * @property Doctrine_Collection $Scored
 * @property Doctrine_Collection $Scores
 * @property Doctrine_Collection $Flags
 * @property Doctrine_Collection $Notifications
 * @property Doctrine_Collection $Strikes
 * @property Doctrine_Collection $Revenue
 * 
 * @method integer             getId()                      Returns the current record's "id" value
 * @method string              getUsername()                Returns the current record's "username" value
 * @method string              getAlgorithm()               Returns the current record's "algorithm" value
 * @method string              getSalt()                    Returns the current record's "salt" value
 * @method string              getPassword()                Returns the current record's "password" value
 * @method boolean             getIsActive()                Returns the current record's "is_active" value
 * @method boolean             getIsSuperAdmin()            Returns the current record's "is_super_admin" value
 * @method timestamp           getLastLogin()               Returns the current record's "last_login" value
 * @method varchar             getRpxIdentifier()           Returns the current record's "rpx_identifier" value
 * @method varchar             getRpxProviderName()         Returns the current record's "rpx_provider_name" value
 * @method bool                getUsernameChanged()         Returns the current record's "username_changed" value
 * @method bool                getShowHelp()                Returns the current record's "show_help" value
 * @method bool                getShowWelcomeSplash()       Returns the current record's "show_welcome_splash" value
 * @method Doctrine_Collection getGroups()                  Returns the current record's "groups" collection
 * @method Doctrine_Collection getPermissions()             Returns the current record's "permissions" collection
 * @method Doctrine_Collection getFollowingUsers()          Returns the current record's "FollowingUsers" collection
 * @method Doctrine_Collection getFollowingLimelights()     Returns the current record's "FollowingLimelights" collection
 * @method Doctrine_Collection getFollowers()               Returns the current record's "Followers" collection
 * @method Doctrine_Collection getSfGuardUserPermission()   Returns the current record's "sfGuardUserPermission" collection
 * @method Doctrine_Collection getSfGuardUserGroup()        Returns the current record's "sfGuardUserGroup" collection
 * @method sfGuardRememberKey  getRememberKeys()            Returns the current record's "RememberKeys" value
 * @method Profile             getProfile()                 Returns the current record's "Profile" value
 * @method Doctrine_Collection getLimelights()              Returns the current record's "Limelights" collection
 * @method Doctrine_Collection getLimelightSlices()         Returns the current record's "LimelightSlices" collection
 * @method Doctrine_Collection getWikis()                   Returns the current record's "Wikis" collection
 * @method Doctrine_Collection getNews()                    Returns the current record's "News" collection
 * @method Doctrine_Collection getSongs()                   Returns the current record's "Songs" collection
 * @method Doctrine_Collection getSpecifications()          Returns the current record's "Specifications" collection
 * @method Doctrine_Collection getLimelightSpecifications() Returns the current record's "LimelightSpecifications" collection
 * @method Doctrine_Collection getNewsLinks()               Returns the current record's "NewsLinks" collection
 * @method Doctrine_Collection getComments()                Returns the current record's "Comments" collection
 * @method Doctrine_Collection getTags()                    Returns the current record's "Tags" collection
 * @method Doctrine_Collection getItemTags()                Returns the current record's "ItemTags" collection
 * @method Doctrine_Collection getActions()                 Returns the current record's "Actions" collection
 * @method Doctrine_Collection getBadges()                  Returns the current record's "Badges" collection
 * @method Doctrine_Collection getLimelightOwn()            Returns the current record's "LimelightOwn" collection
 * @method Doctrine_Collection getLimelightProCon()         Returns the current record's "LimelightProCon" collection
 * @method Doctrine_Collection getProReviews()              Returns the current record's "ProReviews" collection
 * @method Doctrine_Collection getUserReviews()             Returns the current record's "UserReviews" collection
 * @method Doctrine_Collection getFavorites()               Returns the current record's "Favorites" collection
 * @method Doctrine_Collection getNewsFavorites()           Returns the current record's "NewsFavorites" collection
 * @method Doctrine_Collection getSongFavorites()           Returns the current record's "SongFavorites" collection
 * @method Doctrine_Collection getLimelightFavorites()      Returns the current record's "LimelightFavorites" collection
 * @method Doctrine_Collection getUserReviewFavorites()     Returns the current record's "UserReviewFavorites" collection
 * @method Doctrine_Collection getViewed()                  Returns the current record's "Viewed" collection
 * @method Doctrine_Collection getViews()                   Returns the current record's "Views" collection
 * @method Doctrine_Collection getPlayed()                  Returns the current record's "Played" collection
 * @method Doctrine_Collection getScored()                  Returns the current record's "Scored" collection
 * @method Doctrine_Collection getScores()                  Returns the current record's "Scores" collection
 * @method Doctrine_Collection getFlags()                   Returns the current record's "Flags" collection
 * @method Doctrine_Collection getNotifications()           Returns the current record's "Notifications" collection
 * @method Doctrine_Collection getStrikes()                 Returns the current record's "Strikes" collection
 * @method Doctrine_Collection getRevenue()                 Returns the current record's "Revenue" collection
 * @method sfGuardUser         setId()                      Sets the current record's "id" value
 * @method sfGuardUser         setUsername()                Sets the current record's "username" value
 * @method sfGuardUser         setAlgorithm()               Sets the current record's "algorithm" value
 * @method sfGuardUser         setSalt()                    Sets the current record's "salt" value
 * @method sfGuardUser         setPassword()                Sets the current record's "password" value
 * @method sfGuardUser         setIsActive()                Sets the current record's "is_active" value
 * @method sfGuardUser         setIsSuperAdmin()            Sets the current record's "is_super_admin" value
 * @method sfGuardUser         setLastLogin()               Sets the current record's "last_login" value
 * @method sfGuardUser         setRpxIdentifier()           Sets the current record's "rpx_identifier" value
 * @method sfGuardUser         setRpxProviderName()         Sets the current record's "rpx_provider_name" value
 * @method sfGuardUser         setUsernameChanged()         Sets the current record's "username_changed" value
 * @method sfGuardUser         setShowHelp()                Sets the current record's "show_help" value
 * @method sfGuardUser         setShowWelcomeSplash()       Sets the current record's "show_welcome_splash" value
 * @method sfGuardUser         setGroups()                  Sets the current record's "groups" collection
 * @method sfGuardUser         setPermissions()             Sets the current record's "permissions" collection
 * @method sfGuardUser         setFollowingUsers()          Sets the current record's "FollowingUsers" collection
 * @method sfGuardUser         setFollowingLimelights()     Sets the current record's "FollowingLimelights" collection
 * @method sfGuardUser         setFollowers()               Sets the current record's "Followers" collection
 * @method sfGuardUser         setSfGuardUserPermission()   Sets the current record's "sfGuardUserPermission" collection
 * @method sfGuardUser         setSfGuardUserGroup()        Sets the current record's "sfGuardUserGroup" collection
 * @method sfGuardUser         setRememberKeys()            Sets the current record's "RememberKeys" value
 * @method sfGuardUser         setProfile()                 Sets the current record's "Profile" value
 * @method sfGuardUser         setLimelights()              Sets the current record's "Limelights" collection
 * @method sfGuardUser         setLimelightSlices()         Sets the current record's "LimelightSlices" collection
 * @method sfGuardUser         setWikis()                   Sets the current record's "Wikis" collection
 * @method sfGuardUser         setNews()                    Sets the current record's "News" collection
 * @method sfGuardUser         setSongs()                   Sets the current record's "Songs" collection
 * @method sfGuardUser         setSpecifications()          Sets the current record's "Specifications" collection
 * @method sfGuardUser         setLimelightSpecifications() Sets the current record's "LimelightSpecifications" collection
 * @method sfGuardUser         setNewsLinks()               Sets the current record's "NewsLinks" collection
 * @method sfGuardUser         setComments()                Sets the current record's "Comments" collection
 * @method sfGuardUser         setTags()                    Sets the current record's "Tags" collection
 * @method sfGuardUser         setItemTags()                Sets the current record's "ItemTags" collection
 * @method sfGuardUser         setActions()                 Sets the current record's "Actions" collection
 * @method sfGuardUser         setBadges()                  Sets the current record's "Badges" collection
 * @method sfGuardUser         setLimelightOwn()            Sets the current record's "LimelightOwn" collection
 * @method sfGuardUser         setLimelightProCon()         Sets the current record's "LimelightProCon" collection
 * @method sfGuardUser         setProReviews()              Sets the current record's "ProReviews" collection
 * @method sfGuardUser         setUserReviews()             Sets the current record's "UserReviews" collection
 * @method sfGuardUser         setFavorites()               Sets the current record's "Favorites" collection
 * @method sfGuardUser         setNewsFavorites()           Sets the current record's "NewsFavorites" collection
 * @method sfGuardUser         setSongFavorites()           Sets the current record's "SongFavorites" collection
 * @method sfGuardUser         setLimelightFavorites()      Sets the current record's "LimelightFavorites" collection
 * @method sfGuardUser         setUserReviewFavorites()     Sets the current record's "UserReviewFavorites" collection
 * @method sfGuardUser         setViewed()                  Sets the current record's "Viewed" collection
 * @method sfGuardUser         setViews()                   Sets the current record's "Views" collection
 * @method sfGuardUser         setPlayed()                  Sets the current record's "Played" collection
 * @method sfGuardUser         setScored()                  Sets the current record's "Scored" collection
 * @method sfGuardUser         setScores()                  Sets the current record's "Scores" collection
 * @method sfGuardUser         setFlags()                   Sets the current record's "Flags" collection
 * @method sfGuardUser         setNotifications()           Sets the current record's "Notifications" collection
 * @method sfGuardUser         setStrikes()                 Sets the current record's "Strikes" collection
 * @method sfGuardUser         setRevenue()                 Sets the current record's "Revenue" collection
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasesfGuardUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('is_super_admin', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('rpx_identifier', 'varchar', 255, array(
             'type' => 'varchar',
             'length' => 255,
             ));
        $this->hasColumn('rpx_provider_name', 'varchar', 255, array(
             'type' => 'varchar',
             'length' => 255,
             ));
        $this->hasColumn('username_changed', 'bool', null, array(
             'type' => 'bool',
             'default' => 0,
             ));
        $this->hasColumn('show_help', 'bool', null, array(
             'type' => 'bool',
             'default' => 1,
             ));
        $this->hasColumn('show_welcome_splash', 'bool', null, array(
             'type' => 'bool',
             'default' => 1,
             ));


        $this->index('is_active_idx', array(
             'fields' => 
             array(
              0 => 'is_active',
             ),
             ));
        $this->index('rpx', array(
             'fields' => 
             array(
              0 => 'rpx_identifier',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('sfGuardGroup as groups', array(
             'refClass' => 'sfGuardUserGroup',
             'local' => 'user_id',
             'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as permissions', array(
             'refClass' => 'sfGuardUserPermission',
             'local' => 'user_id',
             'foreign' => 'permission_id'));

        $this->hasMany('sfGuardUser as FollowingUsers', array(
             'refClass' => 'FollowUserReference',
             'local' => 'user1_id',
             'foreign' => 'user2_id'));

        $this->hasMany('Limelight as FollowingLimelights', array(
             'refClass' => 'FollowLimelightReference',
             'local' => 'user_id',
             'foreign' => 'limelight_id'));

        $this->hasMany('sfGuardUser as Followers', array(
             'refClass' => 'FollowUserReference',
             'local' => 'user2_id',
             'foreign' => 'user1_id'));

        $this->hasMany('sfGuardUserPermission', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserGroup', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('sfGuardRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Profile', array(
             'local' => 'id',
             'foreign' => 'sf_guard_user_id'));

        $this->hasMany('Limelight as Limelights', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightSlice as LimelightSlices', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Wiki as Wikis', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('News', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Song as Songs', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Specification as Specifications', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightSpecification as LimelightSpecifications', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('NewsLink as NewsLinks', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Tag as Tags', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ItemTag as ItemTags', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserAction as Actions', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserBadge as Badges', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightOwn', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightProCon', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightReviewPro as ProReviews', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightReviewUser as UserReviews', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Favorite as Favorites', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('NewsFavorite as NewsFavorites', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('SongFavorite as SongFavorites', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('LimelightFavorite as LimelightFavorites', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ProReviewFavorite as UserReviewFavorites', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('View as Viewed', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserView as Views', array(
             'local' => 'id',
             'foreign' => 'target_user_id'));

        $this->hasMany('Play as Played', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserScore as Scored', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserScore as Scores', array(
             'local' => 'id',
             'foreign' => 'target_user_id'));

        $this->hasMany('Flag as Flags', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserNotification as Notifications', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserStrike as Strikes', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserRevenue as Revenue', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}