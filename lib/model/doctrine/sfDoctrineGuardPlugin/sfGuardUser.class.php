<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class sfGuardUser extends PluginsfGuardUser
{
  public function postInsert($event) {
    $this->checkBadges();
    $user_count = Doctrine::getTable('sfGuardUser')->getUserCount();
    $this->Profile->login_count = $user_count['count'];
    if ($user_count['count'] <= 100)
      $this->Profile->first_100 = true;
    else if ($user_count['count'] <= 1000)
      $this->Profile->first_1000 = true;
    $this->save();

    if (sfContext::hasInstance())
      $this->adjustModLevels(true);
  }

  public function adjustModLevels($full_check = false)
  {
    $score = $this->Profile->score;
    $levels = LimelightUtils::getUserActionLevels();
    // based on users new score, check if users mod levels need to be adjusted
    foreach ($levels as $key => $level)
    {
      if ($score < $level['min_score'])
      {
        if ($this->hasGroup('mod_'.($key+1)))
          $this->removeGroupByName('mod_'.($key+1));
//        break;
      } else {
        if (!$this->hasGroup('mod_'.($key+1)))
        {
          $this->addGroupByName('mod_'.($key+1));
//          if (!$full_check)
//            break;
        }
      }
    }
  }

  public function getFollowingUser() {
    $q = Doctrine_Query::create()
      ->select('user1_id, user2_id')
      ->from('FollowUserReference')
      ->where('user1_id', $this->id)
      ->useResultCache(true, 3600, 'user_'.$this->id.'_user_following');
    return $q->fetchArray();
  }

  public function getFollowingLimelight() {
    $q = Doctrine_Query::create()
      ->select('user_id, limelight_id')
      ->from('FollowLimelightReference')
      ->where('user_id', $this->id)
      ->useResultCache(true, 3600, 'user_'.$this->id.'_limelight_following');
    return $q->fetchArray();
  }

  public function getFollowers() {
    $q = Doctrine_Query::create()
      ->select('u.*')
      ->from('sfGuardUser u')
      ->innerJoin('u.FollowingUsers f')
      ->where('u.id IN (SELECT fr.user1_id FROM FollowUserReference fr WHERE fr.user2_id = ?)', $this->id)
      ->useResultCache(true, 3600, 'user_'.$this->id.'_followers');
    return $q->fetchArray();
  }

  public function isFollowing($user_id) {
    $following = $this->Following;
    foreach ($following as $user) {
      if ($user['id'] == $user_id)
        return true;
    }
    return false;
  }

  public function unFollow($user_id) {
    $q = Doctrine_Query::create()
    ->delete('FollowingReference')
    ->where('user1 = ? AND user2 = ?', array($this->id, $user_id))
    ->execute();

    $cacheDriver = $this->getTable()->getAttribute(Doctrine_Core::ATTR_RESULT_CACHE);
    $cacheDriver->deleteByPrefix('user_'.$this->id.'_follow');
    $cacheDriver->deleteByPrefix('user_'.$user_id.'_follow');
  }

  public function getStatus () {
    $q = Doctrine_Query::create()
      ->select('p.status')
      ->from('Profile p')
      ->where('id = ?', $this->id);
    $result = $q->fetchArray();
    return $result[0]['status'];
  }

  public function hasPermission($name)
  {
    if (!$this->allPermissions)
    {
      $this->getAllPermissions();
    }
    return isset($this->allPermissions[$name]);
  }

  public function checkBadges() {
    $q = Doctrine_Query::create()
          ->from('Badge')
          ->where('status = ?', 'Active');
    $badges = $q->execute();
    $badge_stats = $this->Badges;
    for ($i=0; $i<count($badges); $i++) {
      $flag = false;
      $cache_flag = false;
      if (count($badge_stats) != 0) {
        for ($k=0; $k<count($badge_stats); $k++) {
          if ($badges[$i]['id'] == $badge_stats[$k]['badge_id'])
            $flag = True;
        }
      }
      if (!$flag) {
        $ub = new UserBadge();
        $ub->user_id = $this->id;
        $ub->badge_id = $badges[$i]['id'];
        $ub->save();
        $cache_flag = true;
      }
    }
  }

  // check if the user can plus vote based on their score ratio
  public function canVote()
  {
    $profile = $this->Profile;
    if ($profile->score_positive_count+$profile->score_negative_count < sfConfig::get('app_user_score_ratio_threshold'))
    {
      if ($profile->score_positive_count == 0 && $profile->score_negative_count >= sfConfig::get('app_user_score_negative_max'))
        return false;
      else
        return true;
    }
    else if ($profile->score_ratio > sfConfig::get('app_user_score_ratio_min'))
      return true;
    else
      return false;
  }

  public function removeGroupByName($name, $con = null)
  {
    $group = Doctrine::getTable('sfGuardGroup')->findOneByName($name);
    if (!$group)
    {
      throw new sfException(sprintf('The group "%s" does not exist.', $name));
    }

    $q = Doctrine_Query::create()
    ->delete('sfGuardUserGroup')
    ->where('user_id = ? AND group_id = ?', array($this->id, $group->id))
    ->execute();
  }

  // get the current claim amount for a user, for use when redeeming
  public function getUserClaimAmount()
  {
    $q = Doctrine_Query::create()
      ->select('SUM(amount) AS amount')
      ->from('UserRevenue')
      ->where('user_id = ? AND status = ? AND claimed = ?', array($this->id, 'Active', 0));
    $result = $q->fetchOne();
    return $result['amount'];
  }

  public function setUserClaimed($paypal_invoice)
  {
    $q = Doctrine_Query::create()
        ->update('UserRevenue')
        ->set('claimed', '?', 1)
        ->set('claim_date', '?', date("d/m/y : H:i:s", time()))
        ->set('paypal_invoice', '?', $paypal_invoice)
        ->where('user_id = ? AND claimed = ?', array($this->id, 0))
        ->execute();
  }
}