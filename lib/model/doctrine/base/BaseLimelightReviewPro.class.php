<?php

/**
 * BaseLimelightReviewPro
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $item_id
 * @property string $excerpt
 * @property string $source_url
 * @property integer $score
 * @property integer $review_score_given
 * @property integer $review_score_max
 * @property integer $source_id
 * @property sfGuardUser $User
 * @property Limelight $Item
 * @property Limelight $Source
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $UserAction
 * @property Doctrine_Collection $scores
 * @property Doctrine_Collection $Flags
 * 
 * @method integer             getUserId()             Returns the current record's "user_id" value
 * @method integer             getItemId()             Returns the current record's "item_id" value
 * @method string              getExcerpt()            Returns the current record's "excerpt" value
 * @method string              getSourceUrl()          Returns the current record's "source_url" value
 * @method integer             getScore()              Returns the current record's "score" value
 * @method integer             getReviewScoreGiven()   Returns the current record's "review_score_given" value
 * @method integer             getReviewScoreMax()     Returns the current record's "review_score_max" value
 * @method integer             getSourceId()           Returns the current record's "source_id" value
 * @method sfGuardUser         getUser()               Returns the current record's "User" value
 * @method Limelight           getItem()               Returns the current record's "Item" value
 * @method Limelight           getSource()             Returns the current record's "Source" value
 * @method Doctrine_Collection getComments()           Returns the current record's "Comments" collection
 * @method Doctrine_Collection getUserAction()         Returns the current record's "UserAction" collection
 * @method Doctrine_Collection getScores()             Returns the current record's "scores" collection
 * @method Doctrine_Collection getFlags()              Returns the current record's "Flags" collection
 * @method LimelightReviewPro  setUserId()             Sets the current record's "user_id" value
 * @method LimelightReviewPro  setItemId()             Sets the current record's "item_id" value
 * @method LimelightReviewPro  setExcerpt()            Sets the current record's "excerpt" value
 * @method LimelightReviewPro  setSourceUrl()          Sets the current record's "source_url" value
 * @method LimelightReviewPro  setScore()              Sets the current record's "score" value
 * @method LimelightReviewPro  setReviewScoreGiven()   Sets the current record's "review_score_given" value
 * @method LimelightReviewPro  setReviewScoreMax()     Sets the current record's "review_score_max" value
 * @method LimelightReviewPro  setSourceId()           Sets the current record's "source_id" value
 * @method LimelightReviewPro  setUser()               Sets the current record's "User" value
 * @method LimelightReviewPro  setItem()               Sets the current record's "Item" value
 * @method LimelightReviewPro  setSource()             Sets the current record's "Source" value
 * @method LimelightReviewPro  setComments()           Sets the current record's "Comments" collection
 * @method LimelightReviewPro  setUserAction()         Sets the current record's "UserAction" collection
 * @method LimelightReviewPro  setScores()             Sets the current record's "scores" collection
 * @method LimelightReviewPro  setFlags()              Sets the current record's "Flags" collection
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLimelightReviewPro extends Item
{
    public function setTableDefinition()
    {
        parent::setTableDefinition();
        $this->setTableName('limelight_review_pro');
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('item_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('excerpt', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('source_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('score', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('review_score_given', 'integer', 3, array(
             'type' => 'integer',
             'length' => 3,
             ));
        $this->hasColumn('review_score_max', 'integer', 3, array(
             'type' => 'integer',
             'length' => 3,
             ));
        $this->hasColumn('source_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));


        $this->index('index', array(
             'fields' => 
             array(
              0 => 'item_id',
              1 => 'user_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Limelight as Item', array(
             'local' => 'item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Limelight as Source', array(
             'local' => 'source_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'LimelightReviewPro_id'));

        $this->hasMany('UserAction', array(
             'local' => 'id',
             'foreign' => 'LimelightReviewPro_id'));

        $this->hasMany('LimelightReviewProScore as scores', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $this->hasMany('LimelightReviewProFlag as Flags', array(
             'local' => 'id',
             'foreign' => 'item_id'));
    }
}