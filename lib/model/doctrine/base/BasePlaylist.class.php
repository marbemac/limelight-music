<?php

/**
 * BasePlaylist
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $score
 * @property integer $total_plays
 * @property integer $favorited_count
 * @property integer $favorite_badge_flag
 * @property sfGuardUser $User
 * @property Doctrine_Collection $PlaylistSongs
 * @property Doctrine_Collection $Scores
 * 
 * @method string              getName()                Returns the current record's "name" value
 * @method integer             getScore()               Returns the current record's "score" value
 * @method integer             getTotalPlays()          Returns the current record's "total_plays" value
 * @method integer             getFavoritedCount()      Returns the current record's "favorited_count" value
 * @method integer             getFavoriteBadgeFlag()   Returns the current record's "favorite_badge_flag" value
 * @method sfGuardUser         getUser()                Returns the current record's "User" value
 * @method Doctrine_Collection getPlaylistSongs()       Returns the current record's "PlaylistSongs" collection
 * @method Doctrine_Collection getScores()              Returns the current record's "Scores" collection
 * @method Playlist            setName()                Sets the current record's "name" value
 * @method Playlist            setScore()               Sets the current record's "score" value
 * @method Playlist            setTotalPlays()          Sets the current record's "total_plays" value
 * @method Playlist            setFavoritedCount()      Sets the current record's "favorited_count" value
 * @method Playlist            setFavoriteBadgeFlag()   Sets the current record's "favorite_badge_flag" value
 * @method Playlist            setUser()                Sets the current record's "User" value
 * @method Playlist            setPlaylistSongs()       Sets the current record's "PlaylistSongs" collection
 * @method Playlist            setScores()              Sets the current record's "Scores" collection
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePlaylist extends Item
{
    public function setTableDefinition()
    {
        parent::setTableDefinition();
        $this->setTableName('playlist');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('score', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('total_plays', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('favorited_count', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('favorite_badge_flag', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('PlaylistSong as PlaylistSongs', array(
             'local' => 'id',
             'foreign' => 'playlist_id'));

        $this->hasMany('PlaylistScore as Scores', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'name' => 'name_slug',
             ));
        $this->actAs($sluggable0);
    }
}