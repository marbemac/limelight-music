<?php

/**
 * BaseLimelightSpecification
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $content
 * @property integer $score
 * @property string $source_url
 * @property integer $source_id
 * @property integer $specification_id
 * @property integer $slice_id
 * @property integer $item_id
 * @property sfGuardUser $User
 * @property Specification $Specification
 * @property Limelight $Source
 * @property Limelight $Item
 * @property Doctrine_Collection $UserAction
 * @property Doctrine_Collection $Scores
 * @property Doctrine_Collection $Flags
 * 
 * @method string                 getContent()          Returns the current record's "content" value
 * @method integer                getScore()            Returns the current record's "score" value
 * @method string                 getSourceUrl()        Returns the current record's "source_url" value
 * @method integer                getSourceId()         Returns the current record's "source_id" value
 * @method integer                getSpecificationId()  Returns the current record's "specification_id" value
 * @method integer                getSliceId()          Returns the current record's "slice_id" value
 * @method integer                getItemId()           Returns the current record's "item_id" value
 * @method sfGuardUser            getUser()             Returns the current record's "User" value
 * @method Specification          getSpecification()    Returns the current record's "Specification" value
 * @method Limelight              getSource()           Returns the current record's "Source" value
 * @method Limelight              getItem()             Returns the current record's "Item" value
 * @method Doctrine_Collection    getUserAction()       Returns the current record's "UserAction" collection
 * @method Doctrine_Collection    getScores()           Returns the current record's "Scores" collection
 * @method Doctrine_Collection    getFlags()            Returns the current record's "Flags" collection
 * @method LimelightSpecification setContent()          Sets the current record's "content" value
 * @method LimelightSpecification setScore()            Sets the current record's "score" value
 * @method LimelightSpecification setSourceUrl()        Sets the current record's "source_url" value
 * @method LimelightSpecification setSourceId()         Sets the current record's "source_id" value
 * @method LimelightSpecification setSpecificationId()  Sets the current record's "specification_id" value
 * @method LimelightSpecification setSliceId()          Sets the current record's "slice_id" value
 * @method LimelightSpecification setItemId()           Sets the current record's "item_id" value
 * @method LimelightSpecification setUser()             Sets the current record's "User" value
 * @method LimelightSpecification setSpecification()    Sets the current record's "Specification" value
 * @method LimelightSpecification setSource()           Sets the current record's "Source" value
 * @method LimelightSpecification setItem()             Sets the current record's "Item" value
 * @method LimelightSpecification setUserAction()       Sets the current record's "UserAction" collection
 * @method LimelightSpecification setScores()           Sets the current record's "Scores" collection
 * @method LimelightSpecification setFlags()            Sets the current record's "Flags" collection
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLimelightSpecification extends Item
{
    public function setTableDefinition()
    {
        parent::setTableDefinition();
        $this->setTableName('limelight_specification');
        $this->hasColumn('content', 'string', 150, array(
             'type' => 'string',
             'length' => 150,
             ));
        $this->hasColumn('score', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('source_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('source_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('specification_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('slice_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('item_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Specification', array(
             'local' => 'specification_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Limelight as Source', array(
             'local' => 'source_id',
             'foreign' => 'id'));

        $this->hasOne('Limelight as Item', array(
             'local' => 'item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('UserAction', array(
             'local' => 'id',
             'foreign' => 'LimelightSpecification_id'));

        $this->hasMany('LimelightSpecificationScore as Scores', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $this->hasMany('LimelightSpecificationFlag as Flags', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'content',
             ),
             'name' => 'content_slug',
             ));
        $this->actAs($sluggable0);
    }
}