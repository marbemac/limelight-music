<?php

/**
 * BaseUserRevenue
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property float $amount
 * @property integer $popularity
 * @property enum $status
 * @property bool $claimed
 * @property datetime $claim_date
 * @property string $paypal_invoice
 * @property integer $user_id
 * @property sfGuardUser $User
 * 
 * @method integer     getId()             Returns the current record's "id" value
 * @method float       getAmount()         Returns the current record's "amount" value
 * @method integer     getPopularity()     Returns the current record's "popularity" value
 * @method enum        getStatus()         Returns the current record's "status" value
 * @method bool        getClaimed()        Returns the current record's "claimed" value
 * @method datetime    getClaimDate()      Returns the current record's "claim_date" value
 * @method string      getPaypalInvoice()  Returns the current record's "paypal_invoice" value
 * @method integer     getUserId()         Returns the current record's "user_id" value
 * @method sfGuardUser getUser()           Returns the current record's "User" value
 * @method UserRevenue setId()             Sets the current record's "id" value
 * @method UserRevenue setAmount()         Sets the current record's "amount" value
 * @method UserRevenue setPopularity()     Sets the current record's "popularity" value
 * @method UserRevenue setStatus()         Sets the current record's "status" value
 * @method UserRevenue setClaimed()        Sets the current record's "claimed" value
 * @method UserRevenue setClaimDate()      Sets the current record's "claim_date" value
 * @method UserRevenue setPaypalInvoice()  Sets the current record's "paypal_invoice" value
 * @method UserRevenue setUserId()         Sets the current record's "user_id" value
 * @method UserRevenue setUser()           Sets the current record's "User" value
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserRevenue extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_revenue');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('popularity', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Active',
              1 => 'Pending',
              2 => 'Flagged',
              3 => 'Struck',
              4 => 'Disabled',
             ),
             'default' => 'Active',
             ));
        $this->hasColumn('claimed', 'bool', null, array(
             'type' => 'bool',
             'default' => 0,
             ));
        $this->hasColumn('claim_date', 'datetime', null, array(
             'type' => 'datetime',
             ));
        $this->hasColumn('paypal_invoice', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));


        $this->index('userIndex', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}