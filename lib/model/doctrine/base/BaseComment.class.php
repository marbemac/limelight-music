<?php

/**
 * BaseComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $content
 * @property integer $score
 * @property enum $type
 * @property integer $parent_id
 * @property integer $edited
 * @property integer $user_id
 * @property integer $News_id
 * @property integer $Song_id
 * @property integer $Wiki_id
 * @property integer $LimelightReviewUser_id
 * @property integer $LimelightReviewPro_id
 * @property sfGuardUser $User
 * @property Comment $Parent
 * @property News $News
 * @property Song $Song
 * @property LimelightReviewUser $LimelightReviewUser
 * @property LimelightReviewPro $LimelightReviewPro
 * @property Wiki $Wiki
 * @property Doctrine_Collection $Children
 * @property Doctrine_Collection $UserAction
 * @property Doctrine_Collection $Scores
 * @property Doctrine_Collection $Flags
 * 
 * @method string              getContent()                Returns the current record's "content" value
 * @method integer             getScore()                  Returns the current record's "score" value
 * @method enum                getType()                   Returns the current record's "type" value
 * @method integer             getParentId()               Returns the current record's "parent_id" value
 * @method integer             getEdited()                 Returns the current record's "edited" value
 * @method integer             getUserId()                 Returns the current record's "user_id" value
 * @method integer             getNewsId()                 Returns the current record's "News_id" value
 * @method integer             getSongId()                 Returns the current record's "Song_id" value
 * @method integer             getWikiId()                 Returns the current record's "Wiki_id" value
 * @method integer             getLimelightReviewUserId()  Returns the current record's "LimelightReviewUser_id" value
 * @method integer             getLimelightReviewProId()   Returns the current record's "LimelightReviewPro_id" value
 * @method sfGuardUser         getUser()                   Returns the current record's "User" value
 * @method Comment             getParent()                 Returns the current record's "Parent" value
 * @method News                getNews()                   Returns the current record's "News" value
 * @method Song                getSong()                   Returns the current record's "Song" value
 * @method LimelightReviewUser getLimelightReviewUser()    Returns the current record's "LimelightReviewUser" value
 * @method LimelightReviewPro  getLimelightReviewPro()     Returns the current record's "LimelightReviewPro" value
 * @method Wiki                getWiki()                   Returns the current record's "Wiki" value
 * @method Doctrine_Collection getChildren()               Returns the current record's "Children" collection
 * @method Doctrine_Collection getUserAction()             Returns the current record's "UserAction" collection
 * @method Doctrine_Collection getScores()                 Returns the current record's "Scores" collection
 * @method Doctrine_Collection getFlags()                  Returns the current record's "Flags" collection
 * @method Comment             setContent()                Sets the current record's "content" value
 * @method Comment             setScore()                  Sets the current record's "score" value
 * @method Comment             setType()                   Sets the current record's "type" value
 * @method Comment             setParentId()               Sets the current record's "parent_id" value
 * @method Comment             setEdited()                 Sets the current record's "edited" value
 * @method Comment             setUserId()                 Sets the current record's "user_id" value
 * @method Comment             setNewsId()                 Sets the current record's "News_id" value
 * @method Comment             setSongId()                 Sets the current record's "Song_id" value
 * @method Comment             setWikiId()                 Sets the current record's "Wiki_id" value
 * @method Comment             setLimelightReviewUserId()  Sets the current record's "LimelightReviewUser_id" value
 * @method Comment             setLimelightReviewProId()   Sets the current record's "LimelightReviewPro_id" value
 * @method Comment             setUser()                   Sets the current record's "User" value
 * @method Comment             setParent()                 Sets the current record's "Parent" value
 * @method Comment             setNews()                   Sets the current record's "News" value
 * @method Comment             setSong()                   Sets the current record's "Song" value
 * @method Comment             setLimelightReviewUser()    Sets the current record's "LimelightReviewUser" value
 * @method Comment             setLimelightReviewPro()     Sets the current record's "LimelightReviewPro" value
 * @method Comment             setWiki()                   Sets the current record's "Wiki" value
 * @method Comment             setChildren()               Sets the current record's "Children" collection
 * @method Comment             setUserAction()             Sets the current record's "UserAction" collection
 * @method Comment             setScores()                 Sets the current record's "Scores" collection
 * @method Comment             setFlags()                  Sets the current record's "Flags" collection
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseComment extends Item
{
    public function setTableDefinition()
    {
        parent::setTableDefinition();
        $this->setTableName('comment');
        $this->hasColumn('content', 'string', 1000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 1000,
             ));
        $this->hasColumn('score', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'News',
              1 => 'LimelightReviewUser',
              2 => 'LimelightReviewPro',
              3 => 'Wiki',
             ),
             'notnull' => true,
             ));
        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('edited', 'integer', 2, array(
             'type' => 'integer',
             'default' => 0,
             'notnull' => true,
             'length' => 2,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('News_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('Song_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('Wiki_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('LimelightReviewUser_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('LimelightReviewPro_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));


        $this->index('index', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             ));
        $this->index('parentIndex', array(
             'fields' => 
             array(
              0 => 'parent_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Comment as Parent', array(
             'local' => 'parent_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('News', array(
             'local' => 'News_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Song', array(
             'local' => 'Song_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('LimelightReviewUser', array(
             'local' => 'LimelightReviewUser_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('LimelightReviewPro', array(
             'local' => 'LimelightReviewPro_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Wiki', array(
             'local' => 'Wiki_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Comment as Children', array(
             'local' => 'id',
             'foreign' => 'parent_id'));

        $this->hasMany('UserAction', array(
             'local' => 'id',
             'foreign' => 'Comment_id'));

        $this->hasMany('CommentScore as Scores', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $this->hasMany('CommentFlag as Flags', array(
             'local' => 'id',
             'foreign' => 'item_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}