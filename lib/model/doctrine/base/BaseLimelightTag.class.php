<?php

/**
 * BaseLimelightTag
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property integer $score
 * @property enum $status
 * @property integer $tag_id
 * @property integer $item_id
 * @property integer $user_id
 * @property sfGuardUser $User
 * @property Tag $Tag
 * @property Limelight $Item
 * 
 * @method string       getName()    Returns the current record's "name" value
 * @method integer      getScore()   Returns the current record's "score" value
 * @method enum         getStatus()  Returns the current record's "status" value
 * @method integer      getTagId()   Returns the current record's "tag_id" value
 * @method integer      getItemId()  Returns the current record's "item_id" value
 * @method integer      getUserId()  Returns the current record's "user_id" value
 * @method sfGuardUser  getUser()    Returns the current record's "User" value
 * @method Tag          getTag()     Returns the current record's "Tag" value
 * @method Limelight    getItem()    Returns the current record's "Item" value
 * @method LimelightTag setName()    Sets the current record's "name" value
 * @method LimelightTag setScore()   Sets the current record's "score" value
 * @method LimelightTag setStatus()  Sets the current record's "status" value
 * @method LimelightTag setTagId()   Sets the current record's "tag_id" value
 * @method LimelightTag setItemId()  Sets the current record's "item_id" value
 * @method LimelightTag setUserId()  Sets the current record's "user_id" value
 * @method LimelightTag setUser()    Sets the current record's "User" value
 * @method LimelightTag setTag()     Sets the current record's "Tag" value
 * @method LimelightTag setItem()    Sets the current record's "Item" value
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLimelightTag extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('limelight_tag');
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('score', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Active',
              1 => 'Pending',
              2 => 'Stub',
              3 => 'Flagged',
              4 => 'Disabled',
             ),
             'default' => 'Active',
             ));
        $this->hasColumn('tag_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('item_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Tag', array(
             'local' => 'tag_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Limelight as Item', array(
             'local' => 'item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'name' => 'name_slug',
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}