<?php

/**
 * BaseNewsTagScores
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $count
 * @property integer $news_tag_id
 * @property integer $user_id
 * @property NewsTag $NewsTag
 * 
 * @method integer       getCount()       Returns the current record's "count" value
 * @method integer       getNewsTagId()   Returns the current record's "news_tag_id" value
 * @method integer       getUserId()      Returns the current record's "user_id" value
 * @method NewsTag       getNewsTag()     Returns the current record's "NewsTag" value
 * @method NewsTagScores setCount()       Sets the current record's "count" value
 * @method NewsTagScores setNewsTagId()   Sets the current record's "news_tag_id" value
 * @method NewsTagScores setUserId()      Sets the current record's "user_id" value
 * @method NewsTagScores setNewsTag()     Sets the current record's "NewsTag" value
 * 
 * @package    limelight
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseNewsTagScores extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('news_tag_scores');
        $this->hasColumn('count', 'integer', 3, array(
             'type' => 'integer',
             'default' => 1,
             'length' => '3',
             ));
        $this->hasColumn('news_tag_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));


        $this->index('index', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('NewsTag', array(
             'local' => 'news_tag_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}