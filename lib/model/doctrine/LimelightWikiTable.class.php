<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LimelightWikiTable extends ItemTable
{
  public function getWikiStats($limelight_id)
  {
    $q = Doctrine_Query::create()
        ->select('COUNT(version) as num_versions, COUNT(DISTINCT user_id) AS num_contributors')
        ->from('LimelightWiki')
        ->where('limelight_id = ? AND status = ?', array($limelight_id, 'Active'));
    return $q->fetchOne();
  }

  public function getMaxNonActiveVersion($limelight_id)
  {
    $q = Doctrine_Query::create()
        ->select('id')
        ->from('LimelightWiki')
        ->where('limelight_id = ? AND status = ? AND active != ?', array($limelight_id, 'Active', true))
        ->orderBy('version DESC');
    $result = $q->fetchOne();
    return intval($result['id']);
  }

  public function getNextAvailableGroupId()
  {
    $q = Doctrine_Query::create()
        ->select('group_id')
        ->from('Wiki')
        ->orderBy('group_id DESC');
    $result = $q->fetchOne();
    return intval($result['group_id'])+1;
  }

  /**
   *
   * @param <type> $limelight_id
   * Returns an array with the list of wikis belonging to the limelight
   * whos ID is supplied. The array returned also contains the name and score
   * of the user who submitted the wiki in 'username' and 'score'.
   */
  public function getWikiList($limelight_id, $user_id)
  {
    $q = Doctrine_Query::create()
        ->select('lw.note, lw.user_id, lw.version, lw.active, lw.created_at, lw.limelight_id, wf.user_id AS flagged')
        ->from('LimelightWiki lw')
        ->leftJoin('lw.LimelightWikiFlags wf WITH wf.user_id = ?', $user_id)
        ->where('limelight_id = ? AND status = ?', array($limelight_id, 'Active'))
        ->orderBy('created_at DESC');
    $result = $q->fetchArray();
    return $result;
  }

  public function wikiRevert($limelight_id, $wiki_id)
  {
    $wikiNew = $this->findByDql('limelight_id = ? AND id = ?', array($limelight_id, $wiki_id));
    if ($wikiNew) {
      $wikiOld = $this->findByDql('limelight_id = ? AND active = ?', array($limelight_id, 1));
      $wikiOld[0]->active = 0;
      $wikiOld[0]->save();

      Doctrine_Query::create()
        ->update('LimelightWiki lw')
        ->set('lw.active', '?', true)
        ->where('lw.limelight_id = ? AND lw.id = ?', array($limelight_id, $wiki_id))
        ->execute();
      $wikiVersions = array('old' => $wikiOld[0]->version, 'new' => $wiki_id);
      return $wikiVersions;
    } else
      return false;
  }

  public function getWikiRevision($limelight_id, $version, $user_id)
  {
    $q = Doctrine_Query::create()
        ->select('lw.*, wf.user_id AS flagged')
        ->from('LimelightWiki lw')
        ->leftJoin('lw.LimelightWikiFlags wf WITH wf.user_id = ?', $user_id)
        ->where('lw.limelight_id = ? AND lw.version = ?', array($limelight_id, $version));
    $result = $q->fetchOne();
    return $result;
  }
}